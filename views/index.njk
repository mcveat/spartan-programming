---
layout: page.njk
title: Spartan programming
---
<h1>{{ title }}</h1>

<p>Spartan programming gathers many techniques discussed in the literature, adding some of its own, into a unique coding style whose main objective is minimal use of various elements of the programming language which may contribute to complexity. This programming style relies on strict self-discipline, avoiding some of the opportunities offered by the underlying language, geared at achieving the programming equivalent of laconic speech. </p>
<p>Spartan programming is not directly concerned with {% page "readability" %}, at least not in its subjective and cultural-dependent sense. In fact, spartan programs will bring much misery to anyone preferring long, verbose programs.</p>
<p>In certain ways, spartan programming is a coding style, just like <a href="https://www.kernel.org/doc/Documentation/process/coding-style.rst" target="_blank">the Linux kernel style guide</a>. But, spartan programming is more than just a technical coding style, in that is has a single underlying, unifying principle - minimalism and simplicity taken to extremes.</p>

<h2>History</h2>

<p>The coding guidelines began with a dozen or so printed pages, "a little book of style", which the author handed out to computer science students in the Hebrew university of Jerusalem. The term "Spartan Programming" was coined in 1996, when the author gave a tutorial on "Spartan C++" at the TOOLS (Techniques of Object Oriented Languages and Systems) scientific conference, held in Santa Barbara, CA USA. The guidelines were taught under this name in numerous Technion courses since then.</p>

<h2>Metrics</h2>

<p>Spartan programming strives for simultaneous minimization of all of the following measures of code complexity:</p>

<ol>
  <li>{% page "horizontal-complexity", "Horizontal complexity" %}, that is, the depth of nesting of control structures, just as the total line length.</li>
  <li>{% page "vertical-complexity", "Vertical complexity" %}, that is, module length in lines.</li>
  <li>Token count</li>
  <li>Character count</li>
  <li>Parameters, that is the number of parameters to a routine or a generic structure. </li>
  <li>Variables</li>
  <li>loops, that is the number of iterative instructions and their nesting level.</li>
  <li>conditionals, that is the number of <code>if</code> and multiple branch <code>switch</code> statements.</li>
</ol>

<p>The latter two are related to, but not the same as cycolomatic complexity</p>

<h2>Rationale</h2>

<p>On the one hand, the Babylonian tower principle states that there is a limit to the number of abstraction levels that a software system may have. On the other hand, the seven plus minus one or two principle sets a limit on the number of subcomponents that may constitute a super component. The spartan programming approach makes it possible to erect slightly higher software towers, by stretching the capabilities of basic modules further. Simple, spartan like modules, make a stronger foundation.</p>

<h2>Techniques</h2>

<p>The main techniques offered by the discipline are:</p>

<h3> Frugal use of Variables </h3>

<ol>
  <li>
    <p>Minimizing the number of variables, by inlining variables which are used only once, grouping related variables in a common data structure, and by using advanced programming constructs such as foreach loops (<code>for (Variable in Collection)</code>) and other chaining constructs in supporting languages</p>
  </li>
  <li>
    <p>Minimizing the visibility of variables and other identifiers. That is to say, defining these at the smallest possible scope.</p>
    <p>In C++ one would thus prefer variables defined in a block to those defined in a function scope; function scoped variables are better than class scoped variables, i. e., fields; and fields are not as desirable as variables defined in the file scope. Further, variables defined in the file scope are better made <code>static</code> so that they are not visible in other files.</p>
  </li>
  <li>
    <p>Minimizing the accessibility of variables, by preferring greater encapsulation, e. g., <code>private</code> variables, to <code>public</code> variables.</p>
  </li>
  <li>
    <p>Minimizing the variability of variables, that is striving to make variables <code>final</code> in Java, <code>const</code> in C++, etc., and by using <code>nonnull</code> annotations or restrictions, whenever the development environment or programming language supports it.</p>
  </li>
  <li>
    <p>Minimizing variables' name length, by applying the generic names technique.</p>
  </li>
  <li>
    <p>Minimizing variables life time, by preferring ephemeral variables to longer lived ones, and by avoiding, as much as possible, persistent variables (i. e., files and the such).</p>
    <p>Thus, in C, one should prefer <code>auto</code> (that is stack) variables to <code>static</code> variables. Heap storage on the other hand, although potentially shorter lived than <code>static</code> data, is considered inferior, since heap management requires extra code.</p>
  </li>
  <li>
    <p>Minimizing the use of arrays, and replacing these by collections provided by standard and of-the-shelf libraries.</p>
  </li>
</ol>

<h3>Small interfaces</h3>

<ol>
  <li>Minimizing the number of parameters each modules takes.</li>
  <li>Minimizing the interaction possible through these parameters, by preferring input parameters to output parameters, output parameters to input-output parameters, input-output parameters to parameters passed by reference, and parameters passed by reference to parameters passed by name.</li>
</ol>

<h3> Minimal use of Control</h3>

<ol>
  <li>Minimizing the use of conditionals by using specialized constructs such ternarization, inheritance, and classes such as Class Defaults, Class Once and Class Separator</li>
  <li>Simplifying conditionals with early <code>return</code>.</li>
  <li>Minimizing the use of looping constructs, by using action applicator classes such as Class Separate and Class FileSystemVisitor.</li>
  <li>Simplifying logic of iteration with early exits (via <code>return</code>, <code>continue</code> and <code>break</code> statements).</li>
</ol>

<h3>Careful use of Screen Space</h3>

<ol>
  <li>Applying K&R Formatting Style for making an efficient use of screen space.</li>
  <li>Removing unnecessary parenthesis and braces.</li>
  <li>Keeping routines short by appropriate modular decomposition.</li>
</ol>

<h2>Worked Out Examples</h2>

<ul>
  <li>Applying spartan programming techniques to a C File</li>
  <li>Applying spartan programming techniques to a Java function</li>
  <li>Appling spartan programming techniques to a yet another Java function</li>
</ul>

<h2>Related Guidelines</h2>

<ul>
  <li>Guidelines for variable naming</li>
  <li>The generic names technique</li>
</ul>

<h2>Java examples</h2>

<p>The following represents a not-so-small sample of spartan programming code in Java.</p>

<h3>Instantiable Classes</h3>

<ul>
  <li>Class Position</li>
  <li>Class Tag</li>
  <li>Class Stopper</li>
  <li>Class CSVLine</li>
  <li>Class CSVWriter</li>
  <li>Class MultiMap</li>
  <li>Class Statistics</li>
  <li>Class Graph</li>
  <li>Class Tab </li>
</ul>

<h3>Utilities classes</h3>

<ul>
  <li>Class Anagrams</li>
  <li>Class Box</li>
  <li>Class Unbox</li>
  <li>Class DBC</li>
  <li>Class Permutation</li>
</ul>

<h3>Classical Data structures</h3>

<ul>
  <li>Class AVLTree</li>
  <li>Class Graph</li>
</ul>

<h3>Graph Algorithms</h3>

<ul>
  <li>Class LongestWalkProcessor</li>
  <li>Class StrongComponentProcessor</li>
</ul>

<h3>Small Applications</h3>

<ul>
  <li>Class MedianExperimentor</li>
  <li>Class ExploreClass</li>
  <li>Class FindClassFile</li>
</ul>

<h2>Library classes</h2>

<p>Spartan programming suggests encapsulating control with appropriate abstraction mechanisms. The following Java classes:</p>

<ul>
  <li>demonstrate spartan programming,</li>
  <li>demonstrate how control can be encapsulated in classes, and</li>
  <li>are useful to anyone practicing spartan programming</li>
</ul>

<h3>Classes Reifying Conditionals</h3>

<ul>
  <li>Class All</li>
  <li>Class Once</li>
  <li>Class Separator</li>
  <li>Class STOP</li>
  <li>Class Defaults</li>
  <li>Class On</li>
</ul>

<h3>Iteration and Visitation Classes</h3>

<ul>
  <li>Class DFS</li>
  <li>Class FileSystemVisitor</li>
  <li>Class Separate</li>
</ul>

<h3>Reifying Algorithms</h3>

<ul>
  <li>Class ApproximateMedian</li>
</ul>
